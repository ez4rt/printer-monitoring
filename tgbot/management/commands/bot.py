import asyncio
from django.core.management.base import BaseCommand
from django.core.exceptions import ObjectDoesNotExist
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot, CallbackQuery
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    ApplicationBuilder,
    MessageHandler,
    filters
)
from asgiref.sync import sync_to_async
from prettytable import PrettyTable
from monitoring.models import Printer, Statistics, ChangeSupply, PrinterError, SupplyDetails, PrinterSupplyStatus
from django.contrib.admin.models import LogEntry
from monitoring.views import get_area_name, create_events
from datetime import timedelta
from django.db.models import Q
from functools import wraps
from decouple import config
from tgbot.models import TelegramUser
import signal
from easy_async_tg_notify import Notifier

token = config('TELEGRAM_BOT_TOKEN')

logging.basicConfig(
    format="%(levelname)s %(asctime)s %(name)s %(message)s",
    level=logging.INFO,
    filename='logs/tgbot.log'
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger('tgbot')


(START_ROUTES, PRINTERS_ROUTES, INPUT_PRINTER_ROUTES, EVENTS_ROUTES, INPUT_EVENTS_ROUTES, SUPPLIES_ROUTES,
 INPUT_SUPPLIES_ROUTES, END_ROUTES) = range(8)

PRINTERS, EVENTS, EVENTS_SUPPLIES, SUPPLIES, SINGLE_OBJECT, ALL_OBJECTS, HELP, EXIT, GO_BACK_START = range(9)

ALLOWED_USERS = set(TelegramUser.objects.values_list('chat_id', flat=True))

active_sessions = set()
active_chats_notify = set()

TABLE_SIZE = 20
current_page = 0


def check_user(update):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        return False
    return True


def user_check_access(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if not check_user(update):
            user = update.message.from_user

            logger.warning("Unauthorized acces attempt - user: %s %s, chat_id: %s.",
                           user.first_name, user.last_name, update.effective_chat.id)
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapper


def get_field_name(nm_field:str) -> str:
    field_names_mapping = {
        'ip_address': 'IP-–∞–¥—Ä–µ—Å',
        'stamp': '–ú–∞—Ä–∫–∞',
        'model': '–ú–æ–¥–µ–ª—å',
        'serial_number': '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä',
        'inventory_number': '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä',
        'location': '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
        'department': '–û—Ç–¥–µ–ª',
        'date_of_commission': '–î–∞—Ç–∞ –≤–≤–æ–¥–∞',
        'is_active': '–ê–∫—Ç–∏–≤–µ–Ω',
        'is_archived': '–í –∞—Ä—Ö–∏–≤–µ',
        'cartridge': '–ö–∞—Ä—Ç—Ä–∏–¥–∂',
        'drum_unit': '–§–æ—Ç–æ–±–∞—Ä–∞–±–∞–Ω',
        'color': '–¶–≤–µ—Ç',
        'black': '–ß–µ—Ä–Ω—ã–π',
        'cyan': '–ì–æ–ª—É–±–æ–π',
        'magenta': '–ü—É—Ä–ø—É—Ä–Ω—ã–π',
        'yellow': '–ñ–µ–ª—Ç—ã–π',
        'comment': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        'name': '–ò–º—è',
        'type': '–¢–∏–ø',
        'price': '–°—Ç–æ–∏–º–æ—Å—Ç—å',
    }
    return field_names_mapping.get(nm_field, nm_field)


def wrap_text(text, width):
    text = str(text)
    return '\n'.join(text[i:i + width] for i in range(0, len(text), width))


async def handle_pagination(query: CallbackQuery, request: list, nm_page: str) -> dict:
    global current_page
    if query.data == f'prev_page_{nm_page}':
        current_page = max(0, current_page - 1)
    elif query.data == f'next_page_{nm_page}':
        current_page += 1
    else:
        current_page = 0

    total_pages = (len(request) + TABLE_SIZE - 1) // TABLE_SIZE
    start_index = current_page * TABLE_SIZE
    end_index = start_index + TABLE_SIZE
    qty_lines = request[start_index:end_index]

    keyboard = list()
    if total_pages > 1:
        if current_page == 0:
            keyboard = [[InlineKeyboardButton("‚û°Ô∏è", callback_data=f'next_page_{nm_page}')]]
        elif current_page == total_pages - 1:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'prev_page_{nm_page}')]]
        else:
            keyboard = [
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'prev_page_{nm_page}'),
                    InlineKeyboardButton("‚û°Ô∏è", callback_data=f'next_page_{nm_page}')
                ]
            ]

    return_dict = {
        'total_pages': total_pages,
        'qty_lines': qty_lines,
        'keyboard': keyboard,
        'current_page': current_page,
    }

    return return_dict


@user_check_access
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user

    chat_id = update.message.chat_id
    logger.info(ALLOWED_USERS)
    active_sessions.add(chat_id)

    logger.info("User %s %s started chatting", user.first_name, user.last_name)
    keyboard = [
        [InlineKeyboardButton("üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã", callback_data=str(PRINTERS))],
        [InlineKeyboardButton("üìÖ –°–æ–±—ã—Ç–∏—è", callback_data=str(EVENTS))],
        [InlineKeyboardButton("Ô∏èüì¶ –†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=str(SUPPLIES))],
        [
            InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data=str(HELP)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç üñ®Ô∏èüßë‚Äçüîß *–ü—Ä–∏–Ω—Ç–µ—Ä –ú–∞—Å—Ç–µ—Ä: –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ü—Ä–∏–Ω—Ç–µ—Ä–æ–≤*. –Ø –ø–æ–º–æ–≥—É –í–∞–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é "
        "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. \n\n"
        "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å‚ùì",
        parse_mode='Markdown',
        reply_markup=reply_markup)

    return START_ROUTES


async def start_over(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã", callback_data=str(PRINTERS))],
        [InlineKeyboardButton("üìÖ –°–æ–±—ã—Ç–∏—è", callback_data=str(EVENTS))],
        [InlineKeyboardButton("üì¶ –†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=str(SUPPLIES))],
        [
            InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data=str(HELP)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –Ω–∞—á–∞–ª—É!\n"
             "–ú–µ–Ω—è –≤—Å—ë –µ—â–µ –∑–æ–≤—É—Ç üñ®Ô∏èüßë‚Äçüîß *–ü—Ä–∏–Ω—Ç–µ—Ä –ú–∞—Å—Ç–µ—Ä: –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ü—Ä–∏–Ω—Ç–µ—Ä–æ–≤*. –Ø –ø–æ–º–æ–≥—É –í–∞–º –ø–æ–ª—É—á–∏—Ç—å "
             "–Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
             "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å‚ùì",
        parse_mode='Markdown',
        reply_markup=reply_markup)
    return START_ROUTES


async def printers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üñ®Ô∏èüñ®Ô∏èüñ®Ô∏è –í—Å–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã", callback_data=str(ALL_OBJECTS)), ],
        [InlineKeyboardButton("üñ®Ô∏è –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä", callback_data=str(SINGLE_OBJECT)), ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(GO_BACK_START)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="üñ®Ô∏è *–ü–†–ò–ù–¢–ï–†–´*\n\n"
             "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø—Ü–∏—é.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    return PRINTERS_ROUTES


async def all_printers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    user = update.callback_query.from_user

    logger.info("User %s %s requested information about all printers on page %s.",
                user.first_name, user.last_name, current_page + 1)

    printers_all = await sync_to_async(list)(
        Printer.objects.select_related('ip_address__subnet', 'model__stamp', 'location__cabinet', 'location__department').all()
    )
    info = await handle_pagination(query, printers_all, 'all_printers')
    info['keyboard'].append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É", callback_data=str(GO_BACK_START))])
    info['keyboard'].append(
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(PRINTERS)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ]
    )
    reply_markup = InlineKeyboardMarkup(info['keyboard'])

    table = PrettyTable()
    table.field_names = ['–ü—Ä–∏–Ω—Ç–µ—Ä', '–°—Ç–∞—Ç—É—Å', 'Ip-–∞–¥—Ä–µ—Å', '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ']
    for printer in info['qty_lines']:
        table.add_row(
            [
                f'{printer.model}',
                'üü¢' if printer.is_active else 'üî¥',
                printer.ip_address.address,
                f'{printer.get_subnet_name()}, {printer.location}',
            ]
        )

    message = (
            f"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã | [{len(printers_all)}]</b>\n\n" +
            (f"<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {info['current_page'] + 1}</i>\n" if info['total_pages'] > 1 else '') +
            f"<pre>{table}</pre>\n\n" +
            "‚ÑπÔ∏è –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ò∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π." +
            (f"\nüî¢ –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è" if info['total_pages'] > 1 else '') +
            "\n\nü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )

    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return END_ROUTES


async def single_printer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    printers_all = await sync_to_async(list)(
        Printer.objects.select_related('ip_address__subnet', 'model__stamp', 'location__cabinet',
                                       'location__department').all()
    )

    info = await handle_pagination(query, printers_all, 'single_printer_events')

    reply_markup = InlineKeyboardMarkup(info['keyboard'])

    table = PrettyTable()
    table.field_names = ['ID', '–ü—Ä–∏–Ω—Ç–µ—Ä', '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ']
    for printer in info['qty_lines']:
        table.add_row(
            [
                printer.id,
                f'{printer.model}',
                f'{printer.get_subnet_name()}, {printer.location}',
            ]
        )

    message = (
            f"‚úÖ <b>–ü–†–ò–ù–¢–ï–†</b>\n\n" +
            (f"<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {info['current_page'] + 1}</i>\n" if info['total_pages'] > 1 else '') +
            f"<pre>{table}</pre>\n\n" +
            "‚ÑπÔ∏è –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ò∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π." +
            (f"\nüî¢ –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è" if info['total_pages'] > 1 else '') +
            "\n\nü§î –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞, —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–∏—Å–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É."
    )

    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup,
    )
    return INPUT_PRINTER_ROUTES


async def handle_text_input_printer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text

    printer_ids = await sync_to_async(list)(Printer.objects.values_list('id', flat=True))

    if user_input.isdigit():
        printer_id = int(user_input)
        if printer_id in printer_ids:
            await result_single_printer(update, context, printer_id)
        else:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä —Å ID={printer_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞ "
                f"–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É."
        )


async def result_single_printer(update: Update, context: ContextTypes.DEFAULT_TYPE, printer_id) -> int:
    user = update.message.from_user

    logger.info("User %s %s requested information about the printer with id=%s.",
                user.first_name, user.last_name, printer_id)

    keyboard = [
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É", callback_data=str(GO_BACK_START)),],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(PRINTERS)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    printer = await sync_to_async(Printer.objects.select_related(
        'ip_address__subnet', 'model__stamp', 'location__cabinet', 'location__department', 'inventory_number'
    ).get)(id=printer_id)
    try:
        printer_stats = await sync_to_async(
            lambda: Statistics.objects.filter(printer_id=printer_id).latest('time_collect')
        )()
    except ObjectDoesNotExist:
        printer_stats = None

    table = PrettyTable()
    table.field_names = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ó–Ω–∞—á–µ–Ω–∏–µ']

    table.add_row(['–†–∞–π–æ–Ω', get_area_name(printer.ip_address.subnet.name)])
    for field in printer._meta.fields:
        value = getattr(printer, field.name)
        if value is not None:
            if field.name != 'id' and field.name != 'location':
                if field.name == 'is_active':
                    value = 'üü¢' if value else 'üî¥'
                if field.name == 'is_archived':
                    value = 'üü¢' if value else 'üî¥'
                table.add_row([get_field_name(field.name), value])

            if field.name == 'location':
                table.add_row(['–ö–∞–±–∏–Ω–µ—Ç', printer.location.cabinet])
                table.add_row(['–û—Ç–¥–µ–ª', printer.location.department])


    printer_supplies = await sync_to_async(list)(
        PrinterSupplyStatus.objects.select_related('supply').filter(printer_id=printer_id)
    )

    for supply in printer_supplies:
        table.add_row([supply.supply, f'{supply.remaining_supply_percentage}%'])

    if printer_stats is not None:
        table.add_row(['–ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü', printer_stats.page])
        table.add_row(['C—Ç—Ä–∞–Ω–∏—Ü –ø–µ—á–∞—Ç–∏', printer_stats.print])
        table.add_row(['–ö–æ–ª-–≤–æ –∫–æ–ø–∏–π', printer_stats.copies])
        table.add_row(['–ö–æ–ª-–≤–æ —Å–∫–∞–Ω–æ–≤', printer_stats.scan])

    await update.message.reply_text(
        text=f"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä —Å ID - {printer_id}</b>\n\n"
             f"<pre>{table}</pre>\n\n"
             f"ü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return END_ROUTES


async def events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üìÖüìÖüìÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data=str(ALL_OBJECTS)), ],
        [InlineKeyboardButton("üìÖüñ®Ô∏è –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞", callback_data=str(SINGLE_OBJECT)), ],
        [InlineKeyboardButton("üì¶üîÑ –ó–∞–º–µ–Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data=str(EVENTS_SUPPLIES)), ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(GO_BACK_START)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text="üìÖ *–°–û–ë–´–¢–ò–Ø*\n\n"
             "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø—Ü–∏—é.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    return EVENTS_ROUTES


async def all_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user = update.callback_query.from_user

    logger.info("User %s %s requested information about all the events on page %s.",
                user.first_name, user.last_name, current_page + 1)

    await query.answer()

    recent_changes_supplies = await sync_to_async(lambda: list(
        ChangeSupply.objects.select_related('printer__ip_address', 'supply', 'printer__model__stamp').order_by('-time_change')[:35]))()
    recent_errors = await sync_to_async(
        lambda: list(PrinterError.objects.select_related('printer__ip_address', 'printer__model__stamp').order_by('-event_date')[:35]))()
    recent_admin_log = await sync_to_async(lambda: LogEntry.objects.order_by('-action_time')[:35])()
    recent_events = await sync_to_async(create_events)(recent_changes_supplies, recent_errors, recent_admin_log)
    new_recent_events = recent_events[:35]

    global TABLE_SIZE
    TABLE_SIZE = 7

    info = await handle_pagination(query, new_recent_events, 'all_events')

    TABLE_SIZE = 20

    info['keyboard'].append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É", callback_data=str(GO_BACK_START))])
    info['keyboard'].append(
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(EVENTS)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ]
    )
    reply_markup = InlineKeyboardMarkup(info['keyboard'])

    table = PrettyTable()
    table.field_names = ['–í—Ä–µ–º—è', '–¢–∏–ø', '–û–±—ä–µ–∫—Ç', '–°–æ–±—ã—Ç–∏–µ']
    for event in info['qty_lines']:
        table.add_row([wrap_text(event['action_time'], 11), wrap_text(event['type'], 10),
                       wrap_text(event['object_repr'], 25), wrap_text(event['description'], 25)])

    message = (
            f"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n" +
            (f"<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {info['current_page'] + 1}</i>\n" if info['total_pages'] > 1 else '') +
            f"<pre>{table}</pre>\n\n" +
            "‚ÑπÔ∏è –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ò∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π." +
            (f"\nüî¢ –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è" if info['total_pages'] > 1 else '') +
            "\n\nü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )

    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return END_ROUTES


async def single_printer_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    printers_all = await sync_to_async(list)(
        Printer.objects.select_related(
            'ip_address__subnet', 'model__stamp', 'location__cabinet', 'location__department').all()
    )

    info = await handle_pagination(query, printers_all, 'single_printer_events')

    reply_markup = InlineKeyboardMarkup(info['keyboard'])

    table = PrettyTable()
    table.field_names = ['ID', '–ü—Ä–∏–Ω—Ç–µ—Ä', '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ']
    for printer in info['qty_lines']:
        table.add_row(
            [
                printer.id,
                f'{printer.model}',
                f'{printer.get_subnet_name()}, {printer.location}',
            ]
        )

    message = (
            f"‚úÖ <b>–°–û–ë–´–¢–ò–Ø –ü–†–ò–ù–¢–ï–†–ê</b>\n\n" +
            (f"<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {info['current_page'] + 1}</i>\n" if info['total_pages'] > 1 else '') +
            f"<pre>{table}</pre>\n\n" +
            "‚ÑπÔ∏è –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ò∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π." +
            (f"\nüî¢ –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è" if info['total_pages'] > 1 else '') +
            "\n\nü§î –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞, —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–∏—Å–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É."
    )

    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup,
    )
    return INPUT_EVENTS_ROUTES


async def handle_text_input_printer_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text

    printer_ids = await sync_to_async(list)(Printer.objects.values_list('id', flat=True))

    if user_input.isdigit():
        printer_id = int(user_input)
        if printer_id in printer_ids:
            await result_single_printer_events(update, context, printer_id)
        else:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä —Å ID={printer_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞ "
                f"–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã "
                                        "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.")


async def result_single_printer_events(update: Update, context: ContextTypes.DEFAULT_TYPE, printer_id) -> int:
    user = update.message.from_user

    logger.info("User %s %s requested information about printer events with id=%s.",
                user.first_name, user.last_name, printer_id)

    keyboard = [
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É", callback_data=str(GO_BACK_START)),],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(EVENTS)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    printer = await sync_to_async(Printer.objects.select_related('ip_address').get)(id=printer_id)

    recent_changes_supplies = await sync_to_async(lambda: list(
        ChangeSupply.objects.select_related('printer__ip_address', 'printer__model__stamp', 'supply')
        .filter(printer_id=printer_id).order_by('-time_change')[:10]))()

    recent_errors = await sync_to_async(lambda: list(
        PrinterError.objects.select_related('printer__ip_address__subnet', 'printer__model__stamp')
        .filter(printer_id=printer_id).order_by('-event_date')[:10]))()

    recent_admin_log = await sync_to_async(lambda: list(
        LogEntry.objects.filter(object_repr=printer).order_by('-action_time')[:10]))()

    recent_events = await sync_to_async(create_events)(recent_changes_supplies, recent_errors, recent_admin_log)
    new_recent_events = recent_events[:10]

    table = PrettyTable()
    table.field_names = ['–í—Ä–µ–º—è', '–¢–∏–ø', '–°–æ–±—ã—Ç–∏–µ']
    for event in new_recent_events:
        table.add_row([wrap_text(event['action_time'], 11), wrap_text(event['type'], 10),
                       wrap_text(event['description'], 17)])

    await update.message.reply_text(
        text=f"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —Å –Ω–æ–º–µ—Ä–æ–º - {printer_id}</b>\n\n"
             f"üñ®Ô∏è <b>{printer}</b>\n\n"
             f"<pre>{table}</pre>\n\n"
             f"ü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return END_ROUTES


async def events_supplies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user = update.callback_query.from_user

    logger.info("User %s %s requested information about the events of the replacement of supplies",
                user.first_name, user.last_name)

    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É", callback_data=str(GO_BACK_START)),
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(EVENTS)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    recent_changes_supplies = await sync_to_async(lambda: list(ChangeSupply.objects.select_related(
        'printer__ip_address', 'printer__model__stamp', 'supply').order_by('-time_change')[:20]))()
    table = PrettyTable()
    table.field_names = ['–ü—Ä–∏–Ω—Ç–µ—Ä', '–†–ú', '–í—Ä–µ–º—è –∑–∞–º–µ–Ω—ã',]
    for event in recent_changes_supplies:
        event.time_change += timedelta(hours=7)
        formatted_time = event.time_change.strftime('%Y/%m/%d %H:%M')
        table.add_row(
            [event.printer,
             wrap_text(f'{event.supply}', 10),
             wrap_text(formatted_time, 11)
             ]
        )

    await query.edit_message_text(
        text=f"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–º–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>\n\n"
             f"<pre>{table}</pre>\n\n"
             f"‚ÑπÔ∏è –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ò∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π.\n\n"
             f"ü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return END_ROUTES


async def supplies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üì¶üì¶üì¶ –í—Å–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=str(ALL_OBJECTS)), ],
        [InlineKeyboardButton("üì¶ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=str(SINGLE_OBJECT)), ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(GO_BACK_START)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="üì¶ *–†–ê–°–•–û–î–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´*\n\n"
             "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø—Ü–∏—é.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    return SUPPLIES_ROUTES


async def all_supplies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user = update.callback_query.from_user

    logger.info("User %s %s requested information about all supplies",
                user.first_name, user.last_name)
    await query.answer()

    supplies_query = await sync_to_async(list)(SupplyDetails.objects.select_related('supply').all().order_by('id'))
    printers_supplies = await sync_to_async(list)(
        PrinterSupplyStatus.objects.select_related('printer__ip_address__subnet', 'printer__model__stamp', 'supply').all()
    )

    info = await handle_pagination(query, supplies_query, 'all_supplies')

    info['keyboard'].append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É", callback_data=str(GO_BACK_START))])
    info['keyboard'].append(
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(SUPPLIES)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ]
    )
    reply_markup = InlineKeyboardMarkup(info['keyboard'])

    table = PrettyTable()
    table.field_names = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø', '–ö–æ–ª-–≤–æ', '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–ü—Ä–∏–Ω—Ç–µ—Ä']
    for supply in info['qty_lines']:
        sup_for_printer = None
        for printer_supply in printers_supplies:
            if supply.supply.name == printer_supply.supply.name:
                sup_for_printer = f'{printer_supply.printer.model}'
        table.add_row(
            [
                supply.supply.name,
                supply.supply.type,
                supply.qty,
                supply.supply.price,
                sup_for_printer if sup_for_printer else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            ]
        )

    message = (
            f"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã | [{len(supplies_query)}]</b>\n\n" +
            (f"<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {info['current_page'] + 1}</i>\n" if info['total_pages'] > 1 else '') +
            f"<pre>{table}</pre>\n\n" +
            "‚ÑπÔ∏è –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ò∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π." +
            (f"\nüî¢ –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å —Ä–∞—Å—Ö–æ–¥–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è" if info['total_pages'] > 1 else '') +
            "\n\nü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )

    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return END_ROUTES


async def single_supplies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    supplies_query = await sync_to_async(list)(SupplyDetails.objects.select_related('supply').all().order_by('id'))

    info = await handle_pagination(query, supplies_query, 'single_supplies')

    reply_markup = InlineKeyboardMarkup(info['keyboard'])

    table = PrettyTable()
    table.field_names = ['ID', '–†–ú']
    for supply in info['qty_lines']:
        table.add_row(
            [
                supply.supply_id,
                supply.supply,
            ]
        )

    message = (
            f"‚úÖ <b>–†–ê–°–•–û–î–ù–´–ô –ú–ê–¢–ï–†–ò–ê–õ</b>\n\n" +
            (f"<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {info['current_page'] + 1}</i>\n" if info['total_pages'] > 1 else '') +
            f"<pre>{table}</pre>\n\n" +
            "‚ÑπÔ∏è –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ò∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π." +
            (f"\nüî¢ –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å —Ä–∞—Å—Ö–æ–¥–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è" if info['total_pages'] > 1 else '') +
            "\n\nü§î –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–∏—Å–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É."
    )

    await query.edit_message_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return INPUT_SUPPLIES_ROUTES


async def handle_text_input_supplies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text
    supply_ids = await sync_to_async(list)(SupplyDetails.objects.values_list('id', flat=True))

    if user_input.isdigit():
        supply_id = int(user_input)
        if supply_id in supply_ids:
            await result_single_supplies(update, context, supply_id)
        else:
            await update.message.reply_text(
                f"‚ö†Ô∏è –†–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å ID={supply_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID "
                f"–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "
                                        "/exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.")


async def result_single_supplies(update: Update, context: ContextTypes.DEFAULT_TYPE, supply_id) -> int:
    user = update.message.from_user

    logger.info("User %s %s requested information about the supply with id=%s.",
                user.first_name, user.last_name, supply_id)

    keyboard = [
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É", callback_data=str(GO_BACK_START)),],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(SUPPLIES)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    supply = await sync_to_async(SupplyDetails.objects.select_related('supply').get)(id=supply_id)

    table = PrettyTable()
    table.field_names = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ó–Ω–∞—á–µ–Ω–∏–µ']

    for field in supply.supply._meta.fields:
        value = getattr(supply.supply, field.name)
        if field.name != 'id':
            if value is not None:
                table.add_row([get_field_name(field.name), get_field_name(value)])

    table.add_row(['–ö–æ–ª-–≤–æ', supply.qty])

    printers_supplies = await sync_to_async(list)(
        PrinterSupplyStatus.objects.select_related(
            'printer__ip_address__subnet', 'printer__model__stamp', 'supply').all()
    )

    sup_for_printer = None
    for printer_supply in printers_supplies:
        if supply.supply.name == printer_supply.supply.name:
            sup_for_printer = f'{printer_supply.printer.model}'
    table.add_row(
        [
            '–ü—Ä–∏–Ω—Ç–µ—Ä',
            sup_for_printer if sup_for_printer else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        ]
    )

    await update.message.reply_text(
        text=f"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å –Ω–æ–º–µ—Ä–æ–º - {supply_id}</b>\n\n"
             f"<pre>{table}</pre>\n\n"
             f"ü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return END_ROUTES


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(GO_BACK_START)),
            InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(EXIT)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="üìú <b>–°–ü–†–ê–í–ö–ê</b>\n\n"
             "1Ô∏è‚É£ –†–∞–∑–¥–µ–ª <i>–ü—Ä–∏–Ω—Ç–µ—Ä—ã</i> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ "
             "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä–µ.\n\n"
             "2Ô∏è‚É£ –†–∞–∑–¥–µ–ª <i>–°–æ–±—ã—Ç–∏—è</i> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏ (–æ—à–∏–±–∫–∏ –ø–µ—á–∞—Ç–∏, –∑–∞–º–µ–Ω–∞ "
             "—Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞).\n"
             "‚û§ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ <u>–í—Å–µ —Å–æ–±—ã—Ç–∏—è</u> –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 35 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–∏–∑–æ—à–µ–¥—â–∏—Ö —Å–æ–±—ã—Ç–∏–π;\n"
             "‚û§ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ <u>–°–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞</u> –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–∏–∑–æ—à–µ–¥—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ "
             "–ø—Ä–∏–Ω—Ç–µ—Ä–∞;\n"
             "‚û§ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–±—ã—Ç–∏–π <u>–ó–∞–º–µ–Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</u> –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–º–µ–Ω —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö "
             "–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ \n\n"
             "3Ô∏è‚É£ –†–∞–∑–¥–µ–ª <i>–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</i> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¥–ª—è –≤—Å–µ—Ö"
             " –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤.\n\n"
             "4Ô∏è‚É£ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ–∫–Ω—É –Ω–∞–∂–º–∏—Ç–µ <i>–ù–∞–∑–∞–¥</i>\n\n"
             "5Ô∏è‚É£ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –æ–∫–Ω—É –Ω–∞–∂–º–∏—Ç–µ <i>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É</i>\n\n"
             "6Ô∏è‚É£ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ <i>–í—ã—Ö–æ–¥</i>\n\n"
             "‚ÑπÔ∏è –í —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ "
             "‚ò∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.\n\n"
             "üî¢ –¢–∞–∫ –∫–∞–∫ Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ "
             "–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º —Ç–∞–±–ª–∏—Ü–∞–º (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ = 20).\n"
             "‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è\n\n"
             "‚ö†Ô∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
             "üòä –•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã‚ùó",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return END_ROUTES


async def help_command_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user

    logger.info("User %s %s with chat_id=%s asked for help",
                user.first_name, user.last_name, update.effective_chat.id)

    await update.message.reply_text(
        text='üìú <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.</b> <i>–Ø —É–º–µ—é:</i>\n\n'
             '1Ô∏è‚É£ <u>–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:</u>\n'
             '‚û§ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ –∏—Ö —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å;\n'
             '‚û§ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤;\n'
             '‚û§ –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏.\n'
             '‚úÖ –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –Ω–∞–∂–º–∏—Ç–µ /start üöÄ\n '
             '‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –±–æ—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–û–ú–û–©–¨.\n'
             '‚ö†Ô∏è–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n'
             '2Ô∏è‚É£ <u>–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏.</u>\n'
             '‚úÖ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start_notify üîî\n'
             '‚õî –ß—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - /stop_notify üîï \n\n'
             '3Ô∏è‚É£ <u>–í—ã–≤–æ–¥–∏—Ç—å –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞.</u>\n'
             '‚úÖ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /status üë®üèª‚Äçüíª\n\n'
             '4Ô∏è‚É£ <u>–û–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.</u>\n'
             '‚úÖ –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /update_allowed_users üîÑ\n'
             '‚ùó –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º üõ°Ô∏è\n\n'
             'üòä –•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã‚ùó',
        parse_mode='HTML',
    )


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user

    logger.info("User %s %s with chat_id=%s received his status",
                user.first_name, user.last_name, update.effective_chat.id)

    if not check_user(update):
        str_access = ("–î–æ—Å—Ç—É–ø: –ó–∞–ø—Ä–µ—â–µ–Ω üö´\n"
                      "‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        str_access = "–î–æ—Å—Ç—É–ø: –†–∞–∑—Ä–µ—à–µ–Ω ‚úÖ\n"
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=update.effective_chat.id)
        if user_db.admin:
            str_access += "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üõ°Ô∏è\n"
        else:
            str_access += "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§\n"
        if user.id in active_sessions:
            str_access += (
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –ó–∞–ø—É—à–µ–Ω–æ üü¢\n"
                "‚òëÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞–∂–∞—Ç—å –Ω–∞ /exit, –µ—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
            )
        else:
            str_access += "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –í—ã–∫–ª—é—á–µ–Ω–æ üî¥\n"
        if user.id in active_chats_notify:
            str_access += "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã üü¢"
        else:
            str_access += "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª—é—á–µ–Ω—ã üî¥"

    await update.message.reply_text(
        text=f"üë®üèª‚Äçüíª <b>–°–¢–ê–¢–£–°</b>\n\n"
             f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} {user.last_name}\n"
             f"CHAT ID: {update.effective_chat.id}\n" + str_access,
        parse_mode='HTML',
    )


async def end(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user = update.callback_query.from_user

    logger.info("User %s %s has completed the chat",
                user.first_name, user.last_name)

    if user.id in active_sessions:
        active_sessions.remove(user.id)

    await query.answer()

    await query.edit_message_text(text="üëã –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")
    return ConversationHandler.END


@user_check_access
async def end_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user

    chat_id = update.message.chat_id
    if chat_id in active_sessions:
        active_sessions.remove(chat_id)

        logger.info("User %s %s has completed the chat",
                    user.first_name, user.last_name)

        await update.message.reply_text("üëã –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.")


async def check_supplies_every_3days(context: ContextTypes.DEFAULT_TYPE):
    low_supply_printers = await sync_to_async(list)(
        PrinterSupplyStatus.objects.select_related(
            'printer__ip_address__subnet', 'printer__model__stamp', 'supply'
        ).filter(
            supply__type='cartridge', remaining_supply_percentage__lt=10
        )
    )

    printer_ids = [status.printer.id for status in low_supply_printers]

    printers_with_low_supplies = await sync_to_async(list)(
        Printer.objects.select_related(
            'ip_address__subnet', 'model__stamp', 'location__cabinet', 'location__department'
        ).filter(id__in=printer_ids)
    )

    for printer in printers_with_low_supplies:
        message_text = (f'üì¢ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n'
                        f'–ü—Ä–∏–Ω—Ç–µ—Ä: {printer.model}\n'
                        f'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {printer.get_subnet_name()}, {printer.location}')
        for supply in low_supply_printers:
            if supply.printer == printer:
                message_text += f'\n–û—Å—Ç–∞—Ç–æ–∫ {supply.supply} - {supply.remaining_supply_percentage}%'

        await context.bot.send_message(
            chat_id=context.job.chat_id,
            text=message_text,
            parse_mode='HTML',
        )


async def check_supplies_every_7_days(context: ContextTypes.DEFAULT_TYPE):
    low_supply_printers = await sync_to_async(list)(
        PrinterSupplyStatus.objects.select_related(
            'printer__ip_address__subnet', 'printer__model__stamp', 'supply'
        ).filter(
            supply__type='drum_unit', remaining_supply_percentage__lt=20
        )
    )

    printer_ids = [status.printer.id for status in low_supply_printers]

    printers_with_low_supplies = await sync_to_async(list)(
        Printer.objects.select_related(
            'ip_address__subnet', 'model__stamp', 'location__cabinet', 'location__department'
        ).filter(id__in=printer_ids)
    )

    for printer in printers_with_low_supplies:
        message_text = (f'üì¢ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n'
                        f'–ü—Ä–∏–Ω—Ç–µ—Ä: {printer.model}\n'
                        f'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {printer.get_subnet_name()}, {printer.location}')
        for supply in low_supply_printers:
            if supply.printer == printer:
                message_text += f'\n–û—Å—Ç–∞—Ç–æ–∫ {supply.supply} - {supply.remaining_supply_percentage}%'

        await context.bot.send_message(
            chat_id=context.job.chat_id,
            text=message_text,
            parse_mode='HTML',
        )


async def check_supplies_every_2_weeks(context: ContextTypes.DEFAULT_TYPE):
    low_supplies_qty = await sync_to_async(list)(
        SupplyDetails.objects.select_related('supply').filter(qty__lt=20)
    )

    message_sup = ("üì¢ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n"
                   "<i>–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</i>\n")
    for supply in low_supplies_qty:
        message_sup += f"{supply.supply} - {supply.qty}—à—Ç.\n"

    await context.bot.send_message(
        chat_id=context.job.chat_id,
        text=message_sup,
        parse_mode='HTML',
    )


@user_check_access
async def start_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    logger.info("User %s %s has enabled notifications",
                user.first_name, user.last_name)

    chat_id = update.message.chat_id
    if chat_id in active_chats_notify:
        await context.bot.send_message(chat_id=chat_id, text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã!')
        return None

    active_chats_notify.add(chat_id)
    user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=chat_id)
    user_db.active_notify = True
    await sync_to_async(user_db.save)()

    name = update.effective_chat.full_name
    await context.bot.send_message(
        chat_id=chat_id,
        text='ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö üîî'
    )

    context.job_queue.run_repeating(check_supplies_every_3days, interval=259200, first=5, data=name, chat_id=chat_id)
    context.job_queue.run_repeating(check_supplies_every_7_days, interval=604800, first=35, data=name, chat_id=chat_id)
    context.job_queue.run_repeating(check_supplies_every_2_weeks, interval=1209600, first=65, data=name, chat_id=chat_id)


@user_check_access
async def stop_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    logger.info("User %s %s turned off notifications",
                user.first_name, user.last_name)

    chat_id = update.message.chat_id
    job_removed = remove_job_if_exists(context, chat_id)
    if job_removed:
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=chat_id)
        user_db.active_notify = False
        await sync_to_async(user_db.save)()
    text = 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!' if job_removed else 'üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã.'
    await context.bot.send_message(chat_id=chat_id, text=text)


def remove_job_if_exists(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> bool:
    current_jobs = context.job_queue.jobs()
    if chat_id in active_chats_notify:
        for job in current_jobs:
            if job.chat_id == chat_id:
                job.schedule_removal()
        active_chats_notify.remove(chat_id)
        return bool(current_jobs)
    return bool(None)


@user_check_access
async def update_allowed_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=chat_id)
    if user_db.admin:
        logger.info("User %s %s updated the ALLOWED_USERS list",
                    user.first_name, user.last_name)
        name = update.effective_chat.full_name

        context.job_queue.run_once(callback_update_user, 0, data=name, chat_id=chat_id)
    else:
        logger.info("User %s %s tried to update the ALLOWED_USERS list",
                    user.first_name, user.last_name)
        await context.bot.send_message(chat_id=chat_id, text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')


async def callback_update_user(context: ContextTypes.DEFAULT_TYPE):
    global ALLOWED_USERS
    current_allowed_users = ALLOWED_USERS.copy()

    list_users = await sync_to_async(lambda: list(TelegramUser.objects.values_list('chat_id', flat=True)))()
    ALLOWED_USERS = set(list_users)
    new_users = ALLOWED_USERS - current_allowed_users

    if new_users:
        for user in ALLOWED_USERS:
            await context.bot.send_message(chat_id=user, text='–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç ‚úÖ')
        await context.bot.send_message(chat_id=context.job.chat_id, text='–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω üîÑ')
    else:
        await context.bot.send_message(chat_id=context.job.chat_id, text='–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')


async def send_msg(msg_text: str, users_ids):
    async with Notifier(token) as notifier:
        await notifier.send_text(msg_text, users_ids)


@sync_to_async
def update_active_users():
    active_notify_users = TelegramUser.objects.filter(active_notify=True)
    if active_notify_users:
        list_users = list()
        list_ids = list()
        for user in active_notify_users:
            list_users.append(user.username)
            list_ids.append(user.chat_id)

        asyncio.run(send_msg("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã", list_ids))
        logging.info("Notifications are disabled: %s", list_users)
        active_notify_users.update(active_notify=False)


async def signal_handler(sig, frame):
    logging.info('A stop signal has been received. The application is shutting down')
    await update_active_users()
    asyncio.get_event_loop().stop()


async def init_first_users(context: ContextTypes.DEFAULT_TYPE) -> None:
    global ALLOWED_USERS
    logging.info(f'context test {context}')
    current_jobs = context.job_queue.jobs()
    logging.info(f'jobs test {current_jobs}, {type(current_jobs)}')
    logging.info(ALLOWED_USERS)
    if not ALLOWED_USERS:
        users_chat_id = await sync_to_async(lambda: list(TelegramUser.objects.values_list('chat_id', flat=True)))()
        logging.info(users_chat_id)
        if users_chat_id:
            ALLOWED_USERS = set(users_chat_id)
            for job in current_jobs:
                job.schedule_removal()
                logging.info(f'Init first users ({users_chat_id}) success, Job ({job}) Delete')
                for chat_id in users_chat_id:
                    await context.bot.send_message(chat_id=chat_id, text='–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç ‚úÖ')
    else:
        for job in current_jobs:
            job.schedule_removal()
            logging.info(f'Delete init_first_admin_users {job}')


class Command(BaseCommand):
    def handle(self, *args, **options):
        application = Application.builder().token(token).build()

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                START_ROUTES: [
                    CallbackQueryHandler(printers, pattern="^" + str(PRINTERS) + "$"),
                    CallbackQueryHandler(events, pattern="^" + str(EVENTS) + "$"),
                    CallbackQueryHandler(supplies, pattern="^" + str(SUPPLIES) + "$"),
                    CallbackQueryHandler(help_command, pattern="^" + str(HELP) + "$"),
                    CallbackQueryHandler(end, pattern="^" + str(EXIT) + "$"),
                ],
                PRINTERS_ROUTES: [
                    CallbackQueryHandler(printers, pattern="^" + str(PRINTERS) + "$"),
                    CallbackQueryHandler(all_printers, pattern="^" + str(ALL_OBJECTS) + "$"),
                    CallbackQueryHandler(single_printer, pattern="^" + str(SINGLE_OBJECT) + "$"),
                    CallbackQueryHandler(start_over, pattern="^" + str(GO_BACK_START) + "$"),
                    CallbackQueryHandler(help_command, pattern="^" + str(HELP) + "$"),
                    CallbackQueryHandler(end, pattern="^" + str(EXIT) + "$"),
                ],
                INPUT_PRINTER_ROUTES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input_printer),
                    CallbackQueryHandler(printers, pattern="^" + str(PRINTERS) + "$"),
                    CallbackQueryHandler(start_over, pattern="^" + str(GO_BACK_START) + "$"),
                    CallbackQueryHandler(end, pattern="^" + str(EXIT) + "$"),
                    CallbackQueryHandler(single_printer, pattern='prev_page_single_printer'),
                    CallbackQueryHandler(single_printer, pattern='next_page_single_printer'),
                ],
                EVENTS_ROUTES: [
                    CallbackQueryHandler(printers, pattern="^" + str(EVENTS) + "$"),
                    CallbackQueryHandler(all_events, pattern="^" + str(ALL_OBJECTS) + "$"),
                    CallbackQueryHandler(single_printer_events, pattern="^" + str(SINGLE_OBJECT) + "$"),
                    CallbackQueryHandler(events_supplies, pattern="^" + str(EVENTS_SUPPLIES) + "$"),
                    CallbackQueryHandler(start_over, pattern="^" + str(GO_BACK_START) + "$"),
                    CallbackQueryHandler(help_command, pattern="^" + str(HELP) + "$"),
                    CallbackQueryHandler(end, pattern="^" + str(EXIT) + "$"),
                ],
                INPUT_EVENTS_ROUTES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input_printer_events),
                    CallbackQueryHandler(events, pattern="^" + str(EVENTS) + "$"),
                    CallbackQueryHandler(start_over, pattern="^" + str(GO_BACK_START) + "$"),
                    CallbackQueryHandler(end, pattern="^" + str(EXIT) + "$"),
                    CallbackQueryHandler(single_printer_events, pattern='prev_page_single_printer_events'),
                    CallbackQueryHandler(single_printer_events, pattern='next_page_single_printer_events'),
                ],
                SUPPLIES_ROUTES: [
                    CallbackQueryHandler(supplies, pattern="^" + str(SUPPLIES) + "$"),
                    CallbackQueryHandler(all_supplies, pattern="^" + str(ALL_OBJECTS) + "$"),
                    CallbackQueryHandler(single_supplies, pattern="^" + str(SINGLE_OBJECT) + "$"),
                    CallbackQueryHandler(start_over, pattern="^" + str(GO_BACK_START) + "$"),
                    CallbackQueryHandler(help_command, pattern="^" + str(HELP) + "$"),
                    CallbackQueryHandler(end, pattern="^" + str(EXIT) + "$"),
                ],
                INPUT_SUPPLIES_ROUTES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input_supplies),
                    CallbackQueryHandler(supplies, pattern="^" + str(SUPPLIES) + "$"),
                    CallbackQueryHandler(start_over, pattern="^" + str(GO_BACK_START) + "$"),
                    CallbackQueryHandler(end, pattern="^" + str(EXIT) + "$"),
                    CallbackQueryHandler(single_supplies, pattern='prev_page_single_supplies'),
                    CallbackQueryHandler(single_supplies, pattern='next_page_single_supplies'),

                ],
                END_ROUTES: [
                    CallbackQueryHandler(printers, pattern="^" + str(PRINTERS) + "$"),
                    CallbackQueryHandler(events, pattern="^" + str(EVENTS) + "$"),
                    CallbackQueryHandler(supplies, pattern="^" + str(SUPPLIES) + "$"),
                    CallbackQueryHandler(start_over, pattern="^" + str(GO_BACK_START) + "$"),
                    CallbackQueryHandler(end, pattern="^" + str(EXIT) + "$"),
                    CallbackQueryHandler(all_printers, pattern='prev_page_all_printers'),
                    CallbackQueryHandler(all_printers, pattern='next_page_all_printers'),
                    CallbackQueryHandler(all_supplies, pattern='prev_page_all_supplies'),
                    CallbackQueryHandler(all_supplies, pattern='next_page_all_supplies'),
                    CallbackQueryHandler(all_events, pattern='prev_page_all_events'),
                    CallbackQueryHandler(all_events, pattern='next_page_all_events')
                ],
            },
            fallbacks=[CommandHandler("start", start)],
        )

        application.add_handler(conv_handler)
        application.add_handler(CommandHandler('help', help_command_main))
        application.add_handler(CommandHandler('exit', end_input))
        application.add_handler(CommandHandler('start_notify', start_notifications))
        application.add_handler(CommandHandler('stop_notify', stop_notifications))
        application.add_handler(CommandHandler('status', status))
        application.add_handler(CommandHandler('update_allowed_users', update_allowed_users))

        job_queue = application.job_queue
        job_queue.run_repeating(init_first_users, interval=10, first=0)

        signal.signal(signal.SIGINT, lambda sig, frame: asyncio.create_task(signal_handler(sig, frame)))
        signal.signal(signal.SIGTERM, lambda sig, frame: asyncio.create_task(signal_handler(sig, frame)))

        application.run_polling(allowed_updates=Update.ALL_TYPES)
