import telegram.ext
from django.test import TestCase
from telegram.ext import Application, CommandHandler
from unittest.mock import MagicMock, Mock, patch
from decouple import config
from tgbot.management.commands.bot import (start, help_command_main, end_input, start_notifications, stop_notifications,
                                           status, update_allowed_users, callback_update_user, printers, events,
                                           supplies, help_command, start_over, end, get_field_name,
                                           wrap_text, handle_text_input_printer, handle_text_input_supplies,
                                           handle_text_input_printer_events, all_printers, single_printer, all_events,
                                           single_printer_events, events_supplies, all_supplies, single_supplies,
                                           init_first_users, check_supplies_every_3days, check_supplies_every_7_days,
                                           check_supplies_every_2_weeks)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters, JobQueue
from unittest.mock import AsyncMock
from tgbot.models import TelegramUser
from asgiref.sync import sync_to_async
import re
from tests.monitoring.test_models import BaseSetUpPrinterModelTest, SupplyDetailsModelTest, PrinterErrorModelTest
from datetime import timedelta


class TestGetFieldName(TestCase):
    def test_valid_fields(self):
        self.assertEqual(get_field_name('ip_address'), 'IP-–∞–¥—Ä–µ—Å')
        self.assertEqual(get_field_name('stamp'), '–ú–∞—Ä–∫–∞')
        self.assertEqual(get_field_name('model'), '–ú–æ–¥–µ–ª—å')
        self.assertEqual(get_field_name('serial_number'), '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä')
        self.assertEqual(get_field_name('location'), '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')

    def test_invalid_field(self):
        self.assertEqual(get_field_name('unknown_field'), 'unknown_field')

    def test_edge_cases(self):
        self.assertEqual(get_field_name(''), '')
        self.assertEqual(get_field_name(None), None)


class TestWrapText(TestCase):
    def test_wrap_text_basic(self):
        self.assertEqual(wrap_text("Hello, world!", 5), "Hello\n, wor\nld!")

    def test_wrap_text_exact_width(self):
        self.assertEqual(wrap_text("Hello", 5), "Hello")

    def test_wrap_text_longer_width(self):
        self.assertEqual(wrap_text("Hello", 10), "Hello")

    def test_wrap_text_empty_string(self):
        self.assertEqual(wrap_text("", 5), "")

    def test_wrap_text_non_string_input(self):
        self.assertEqual(wrap_text(12345, 2), "12\n34\n5")

    def test_wrap_text_special_characters(self):
        self.assertEqual(wrap_text("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!", 6), "–ü—Ä–∏–≤–µ—Ç\n, –º–∏—Ä!")

    def test_wrap_text_unicode(self):
        self.assertEqual(wrap_text("üòäüòäüòäüòäüòäüòä", 3), "üòäüòäüòä\nüòäüòäüòä")


class StartTelegramApp(TestCase):
    def setUp(self):
        token = config('TELEGRAM_BOT_TOKEN')
        self.application = Application.builder().token(token).build()


class StartTelegramAppUnauthenticatedUser(StartTelegramApp):
    def setUp(self):
        super().setUp()
        self.update = Mock(spec=Update)
        self.context = Mock(spec=ContextTypes.DEFAULT_TYPE)
        self.update.message.from_user.first_name = '–ò–≤–∞–Ω'
        self.update.message.from_user.last_name = '–ò–≤–∞–Ω–æ–≤'
        self.update.effective_chat.id = 123456789
        self.update.effective_user.id = 123456789


class StartTelegramBotAuthenticatedUser(StartTelegramAppUnauthenticatedUser):
    def setUp(self):
        super().setUp()
        self.test_user = TelegramUser(
            chat_id=987654321,
            username='example_user',
            active_notify=False,
            admin=False
        )
        self.test_user.save()

        self.mock_context = AsyncMock()
        self.mock_context.job.chat_id = 12345
        self.mock_context.bot.send_message = AsyncMock()

        self.update.message.from_user.first_name = '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä'
        self.update.message.from_user.last_name = '–°–º–∏—Ä–Ω–æ–≤'
        self.update.effective_chat.id = 987654321
        self.update.effective_user.id = 987654321
        self.update.message.chat_id = 987654321
        self.update.effective_chat.full_name = '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–º–∏—Ä–Ω–æ–≤'
        self.update.message.reply_text = AsyncMock()


class CreateTelegramBotTests(StartTelegramApp):
    def test_add_command_handlers(self):
        self.application.add_handler(CommandHandler('start', start))
        self.application.add_handler(CommandHandler('help', help_command_main))
        self.application.add_handler(CommandHandler('exit', end_input))
        self.application.add_handler(CommandHandler('start_notify', start_notifications))
        self.application.add_handler(CommandHandler('stop_notify', stop_notifications))
        self.application.add_handler(CommandHandler('status', status))
        self.application.add_handler(CommandHandler('update_allowed_users', update_allowed_users))

        self.assertEqual(len(self.application.handlers[0]), 7)
        self.assertEqual(self.application.handlers[0][0].callback, start)
        self.assertEqual(self.application.handlers[0][1].callback, help_command_main)
        self.assertEqual(self.application.handlers[0][2].callback, end_input)
        self.assertEqual(self.application.handlers[0][3].callback, start_notifications)
        self.assertEqual(self.application.handlers[0][4].callback, stop_notifications)
        self.assertEqual(self.application.handlers[0][5].callback, status)
        self.assertEqual(self.application.handlers[0][6].callback, update_allowed_users)
        for i in range(7):
            self.assertIsInstance(self.application.handlers[0][i], CommandHandler)

    def test_add_conversation_handlers(self):
        START_ROUTES, END_ROUTES = range(2)
        ONE, TWO, THREE, FOUR = range(4)
        self.conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                START_ROUTES: [
                    CallbackQueryHandler(printers, pattern="^" + str(ONE) + "$"),
                    CallbackQueryHandler(events, pattern="^" + str(TWO) + "$"),
                    CallbackQueryHandler(supplies, pattern="^" + str(THREE) + "$"),
                    CallbackQueryHandler(help_command, pattern="^" + str(FOUR) + "$"),
                ],
                END_ROUTES: [
                    CallbackQueryHandler(start_over, pattern="^" + str(ONE) + "$"),
                    CallbackQueryHandler(end, pattern="^" + str(TWO) + "$"),
                ],
            },
            fallbacks=[CommandHandler("start", start)],
        )
        self.assertEqual(len(self.conv_handler.entry_points), 1)
        self.assertEqual(len(self.conv_handler.states[0]), 4)  # START_ROUTES
        self.assertEqual(len(self.conv_handler.states[1]), 2)  # END_ROUTES
        expected_patterns_start_routes = [
            re.compile('^0$'), re.compile('^1$'), re.compile('^2$'), re.compile('^3$'),
        ]
        actual_patterns = [handler.pattern for handler in self.conv_handler.states[0]]
        self.assertListEqual(expected_patterns_start_routes, actual_patterns)
        expected_patterns_end_routes = [
            re.compile('^0$'), re.compile('^1$'),
        ]
        actual_patterns = [handler.pattern for handler in self.conv_handler.states[1]]
        self.assertListEqual(expected_patterns_end_routes, actual_patterns)


    def test_run_polling(self):
        self.application.run_polling = MagicMock()
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)
        self.application.run_polling.assert_called_once_with(allowed_updates=Update.ALL_TYPES)


class TelegramBotCommandHandlerUnauthenticatedUserTest(StartTelegramAppUnauthenticatedUser):
    async def test_help_command(self):
        self.update.message.reply_text = AsyncMock()

        await help_command_main(self.update, self.context)

        expected_text = (
            'üìú <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.</b> <i>–Ø —É–º–µ—é:</i>\n\n'
            '1Ô∏è‚É£ <u>–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:</u>\n'
            '‚û§ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ –∏—Ö —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å;\n'
            '‚û§ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤;\n'
            '‚û§ –¥–∞–Ω–Ω—ã–µ –æ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏.\n'
            '‚úÖ –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –Ω–∞–∂–º–∏—Ç–µ /start üöÄ\n '
            '‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –±–æ—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–û–ú–û–©–¨.\n'
            '‚ö†Ô∏è–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n'
            '2Ô∏è‚É£ <u>–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏.</u>\n'
            '‚úÖ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start_notify üîî\n'
            '‚õî –ß—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - /stop_notify üîï \n\n'
            '3Ô∏è‚É£ <u>–í—ã–≤–æ–¥–∏—Ç—å –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞.</u>\n'
            '‚úÖ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /status üë®üèª‚Äçüíª\n\n'
            '4Ô∏è‚É£ <u>–û–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.</u>\n'
            '‚úÖ –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /update_allowed_users üîÑ\n'
            '‚ùó –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º üõ°Ô∏è\n\n'
            'üòä –•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã‚ùó'
        )

        self.update.message.reply_text.assert_awaited_once_with(text=expected_text, parse_mode='HTML')

    async def test_status_command(self):
        self.update.message.reply_text = AsyncMock()

        await status(self.update, self.context)

        expected_text = (
            'üë®üèª‚Äçüíª <b>–°–¢–ê–¢–£–°</b>\n\n'
            '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n'
            'CHAT ID: 123456789\n'
            '–î–æ—Å—Ç—É–ø: –ó–∞–ø—Ä–µ—â–µ–Ω üö´\n'
            '‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        )

        self.update.message.reply_text.assert_awaited_once_with(text=expected_text, parse_mode='HTML')

    async def test_start_command(self):
        self.context.bot.send_message = AsyncMock()

        await start(self.update, self.context)

        expected_text = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."

        self.context.bot.send_message.assert_awaited_once_with(chat_id=self.update.effective_chat.id,
                                                               text=expected_text)

    async def test_end_command(self):
        self.context.bot.send_message = AsyncMock()

        await end_input(self.update, self.context)

        expected_text = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."

        self.context.bot.send_message.assert_awaited_once_with(chat_id=self.update.effective_chat.id,
                                                               text=expected_text)

    async def test_start_notifications_command(self):
        self.context.bot.send_message = AsyncMock()

        await start_notifications(self.update, self.context)

        expected_text = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."

        self.context.bot.send_message.assert_awaited_once_with(chat_id=self.update.effective_chat.id,
                                                               text=expected_text)

    async def test_stop_notifications_command(self):
        self.context.bot.send_message = AsyncMock()

        await stop_notifications(self.update, self.context)

        expected_text = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."

        self.context.bot.send_message.assert_awaited_once_with(chat_id=self.update.effective_chat.id,
                                                               text=expected_text)

    async def test_update_allowed_users_command(self):
        self.context.bot.send_message = AsyncMock()

        await update_allowed_users(self.update, self.context)

        expected_text = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."

        self.context.bot.send_message.assert_awaited_once_with(chat_id=self.update.effective_chat.id,
                                                               text=expected_text)


class TelegramBotEndInputTests(StartTelegramBotAuthenticatedUser):
    async def test_end_input_already_ended(self):
        await callback_update_user(self.mock_context)

        await end_input(self.update, self.context)

        self.update.message.reply_text.assert_called_once_with("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.")

    async def test_end_input_success(self):
        await callback_update_user(self.mock_context)
        await start(self.update, self.context)

        update = Mock(spec=Update)
        context = Mock(spec=ContextTypes.DEFAULT_TYPE)
        update.message.from_user.first_name = '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä'
        update.message.from_user.last_name = '–°–º–∏—Ä–Ω–æ–≤'
        update.effective_chat.id = 987654321
        update.effective_user.id = 987654321
        update.message.chat_id = 987654321
        update.effective_chat.full_name = '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–º–∏—Ä–Ω–æ–≤'
        update.message.reply_text = AsyncMock()

        await end_input(update, context)
        update.message.reply_text.assert_called_once_with("üëã –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")


class TelegramBotStatusCommandTests(StartTelegramBotAuthenticatedUser):
    async def test_user_status(self):
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=987654321)

        self.assertEqual(self.update.effective_chat.id, user_db.chat_id)

        await status(self.update, self.context)

        expected_text = (
            'üë®üèª‚Äçüíª <b>–°–¢–ê–¢–£–°</b>\n\n'
            '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–º–∏—Ä–Ω–æ–≤\n'
            'CHAT ID: 987654321\n'
            '–î–æ—Å—Ç—É–ø: –†–∞–∑—Ä–µ—à–µ–Ω ‚úÖ\n'
            '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§\n'
            '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –í—ã–∫–ª—é—á–µ–Ω–æ üî¥\n'
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª—é—á–µ–Ω—ã üî¥'
        )

        self.update.message.reply_text.assert_awaited_once_with(text=expected_text, parse_mode='HTML')

    async def test_status_admin(self):
        self.test_user.admin = True
        await sync_to_async(self.test_user.save)()
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=987654321)

        self.assertEqual(self.test_user.admin, user_db.admin)

        self.assertEqual(self.update.effective_chat.id, user_db.chat_id)

        self.update.message.from_user.first_name = '–ê–¥–º–∏–Ω'

        await status(self.update, self.context)

        expected_text_admin = (
            'üë®üèª‚Äçüíª <b>–°–¢–ê–¢–£–°</b>\n\n'
            '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ê–¥–º–∏–Ω –°–º–∏—Ä–Ω–æ–≤\n'
            'CHAT ID: 987654321\n'
            '–î–æ—Å—Ç—É–ø: –†–∞–∑—Ä–µ—à–µ–Ω ‚úÖ\n'
            '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üõ°Ô∏è\n'
            '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –í—ã–∫–ª—é—á–µ–Ω–æ üî¥\n'
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª—é—á–µ–Ω—ã üî¥'
        )

        self.update.message.reply_text.assert_awaited_once_with(text=expected_text_admin, parse_mode='HTML')


class TelegramBotStartNotifyCommandTests(StartTelegramBotAuthenticatedUser):
    async def test_start_notify(self):
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=987654321)

        self.assertEqual(self.test_user.active_notify, user_db.active_notify)

        self.assertEqual(self.update.effective_chat.id, user_db.chat_id)

        context = AsyncMock()
        await start_notifications(self.update, context)
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=987654321)
        self.assertEqual(user_db.active_notify, True)
        expected_text = (
            'ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö üîî'
        )
        context.bot.send_message.assert_awaited_once_with(chat_id=self.update.message.chat_id,
                                                          text=expected_text)

        context_again = AsyncMock()
        await start_notifications(self.update, context_again)
        expected_text_again = (
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã!'
        )
        context_again.bot.send_message.assert_awaited_once_with(chat_id=self.update.message.chat_id,
                                                          text=expected_text_again)


class TelegramBotSendNotifyTest(TestCase):
    def setUp(self):
        self.mock_context = AsyncMock()
        self.mock_context.job.chat_id = 12345

        self.mock_printer = MagicMock()
        self.mock_printer.model = "HP LaserJet"
        self.mock_printer.get_subnet_name.return_value = "Subnet1"
        self.mock_printer.location = "1, –æ—Ç–¥–µ–ª - IT"

        self.mock_supply = MagicMock()
        self.mock_supply.supply = "–ß–µ—Ä–Ω—ã–π"
        self.mock_supply.remaining_supply_percentage = 5
        self.mock_supply.printer = self.mock_printer

        self.mock_supply_details = MagicMock()
        self.mock_supply_details.supply = "–ß–µ—Ä–Ω—ã–π"
        self.mock_supply_details.qty = 10

    @patch('monitoring.models.PrinterSupplyStatus.objects.select_related')
    @patch('monitoring.models.Printer.objects.select_related')
    async def test_check_every_3days(self, mock_select_printer, mock_select_printer_supply):
        mock_select_printer.return_value.filter.return_value = [self.mock_printer]
        mock_select_printer_supply.return_value.filter.return_value = [self.mock_supply]

        await check_supplies_every_3days(self.mock_context)

        self.mock_context.bot.send_message.assert_called_once_with(
            chat_id=12345,
            text='üì¢ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n'
                 '–ü—Ä–∏–Ω—Ç–µ—Ä: HP LaserJet\n'
                 '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: Subnet1, 1, –æ—Ç–¥–µ–ª - IT\n'
                 '–û—Å—Ç–∞—Ç–æ–∫ –ß–µ—Ä–Ω—ã–π - 5%',
            parse_mode='HTML',
        )

    @patch('monitoring.models.PrinterSupplyStatus.objects.select_related')
    @patch('monitoring.models.Printer.objects.select_related')
    async def test_check_every_7days(self, mock_select_printer, mock_select_printer_supply):
        mock_select_printer.return_value.filter.return_value = [self.mock_printer]
        mock_select_printer_supply.return_value.filter.return_value = [self.mock_supply]

        await check_supplies_every_7_days(self.mock_context)

        self.mock_context.bot.send_message.assert_called_once_with(
            chat_id=12345,
            text='üì¢ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n'
                 '–ü—Ä–∏–Ω—Ç–µ—Ä: HP LaserJet\n'
                 '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: Subnet1, 1, –æ—Ç–¥–µ–ª - IT\n'
                 '–û—Å—Ç–∞—Ç–æ–∫ –ß–µ—Ä–Ω—ã–π - 5%',
            parse_mode='HTML',
        )

    @patch('monitoring.models.SupplyDetails.objects.select_related')
    async def test_check_every_2week(self, mock_select_supply_details):
        mock_select_supply_details.return_value.filter.return_value = [self.mock_supply_details]

        await check_supplies_every_2_weeks(self.mock_context)

        self.mock_context.bot.send_message.assert_called_once_with(
            chat_id=12345,
            text='üì¢ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n'
                 '<i>–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</i>\n'
                 '–ß–µ—Ä–Ω—ã–π - 10—à—Ç.\n',
            parse_mode='HTML',
        )


class HandleTextInputPrinterTest(BaseSetUpPrinterModelTest):
    async def test_handle_text_input_printer_invalid_id(self):
        update = AsyncMock()
        context = MagicMock()
        update.message.text = '999'


        with patch('monitoring.models.Printer.objects.get', return_value=self.printer):
            await handle_text_input_printer(update, context)

        expected_text = (
            '‚ö†Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä —Å ID=999 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.'
        )
        update.message.reply_text.assert_awaited_once_with(expected_text)

    async def test_handle_text_input_printer_invalid_text(self):
        update = AsyncMock()
        context = MagicMock()
        update.message.text = '!223sd'


        with patch('monitoring.models.Printer.objects.get', return_value=self.printer):
            await handle_text_input_printer(update, context)

        expected_text = (
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.'
        )
        update.message.reply_text.assert_awaited_once_with(expected_text)

    async def test_handle_text_input_printer_valid(self):
        update = AsyncMock()
        context = MagicMock()
        update.message.text = str(self.printer.id)

        with patch('monitoring.models.Printer.objects.get', return_value=self.printer):
            await handle_text_input_printer(update, context)

        str_text = str(update.message.reply_text.call_args[1])
        pattern = r"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä —Å ID - (\d+)</b>"
        match = re.search(pattern, str_text)
        expected_printer_id = int(match.group(1))
        self.assertEqual(self.printer.id, expected_printer_id)
        self.assertIn(str(self.printer.ip_address), str_text)
        self.assertIn(self.printer.model.name, str_text)
        self.assertIn(self.printer.model.stamp.name, str_text)
        self.assertIn(self.printer.serial_number, str_text)
        self.assertIn(self.printer.location.department.name, str_text)
        self.assertIn(self.printer.location.cabinet.number, str_text)


class HandleTextInputSuppliesTest(SupplyDetailsModelTest):
    async def test_handle_text_input_supplies_invalid_id(self):
        update = AsyncMock()
        context = MagicMock()
        update.message.text = '999'

        with patch('monitoring.models.SupplyDetails.objects.get', return_value=self.supply_details):
            await handle_text_input_supplies(update, context)

        expected_text = (
            "‚ö†Ô∏è –†–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å ID=999 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID "
            "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É."
        )
        update.message.reply_text.assert_awaited_once_with(expected_text)

    async def test_handle_text_input_supplies_invalid_text(self):
        update = AsyncMock()
        context = MagicMock()
        update.message.text = '!223sd'

        with patch('monitoring.models.SupplyDetails.objects.get', return_value=self.supply_details):
            await handle_text_input_supplies(update, context)

        expected_text = (
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É."
        )
        update.message.reply_text.assert_awaited_once_with(expected_text)

    async def test_handle_text_input_supplies_valid(self):
        update = AsyncMock()
        context = MagicMock()
        update.message.text = str(self.supply_details.id)

        with patch('monitoring.models.SupplyDetails.objects.get', return_value=self.supply_details):
            await handle_text_input_supplies(update, context)

        str_text = str(update.message.reply_text.call_args[1])
        pattern = r"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å –Ω–æ–º–µ—Ä–æ–º - (\d+)</b>"
        match = re.search(pattern, str_text)
        expected_supply_id = int(match.group(1))
        self.assertEqual(self.supply_details.id, expected_supply_id)
        self.assertIn(self.supply_details.supply.name, str_text)
        self.assertIn(str(self.supply_details.qty), str_text)
        self.assertIn(str(self.supply_details.supply.price), str_text)


class HandleTextInputEventsTest(PrinterErrorModelTest):
    async def test_handle_text_input_printer_events_invalid_id(self):
        update = AsyncMock()
        context = MagicMock()
        update.message.text = '999'

        with patch('monitoring.models.Printer.objects.get', return_value=self.printer):
            await handle_text_input_printer_events(update, context)

        expected_text = (
            "‚ö†Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä —Å ID=999 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞ "
            "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É."
        )
        update.message.reply_text.assert_awaited_once_with(expected_text)

    async def test_handle_text_input_printer_events_invalid_text(self):
        update = AsyncMock()
        context = MagicMock()
        update.message.text = '!223sd'


        with patch('monitoring.models.Printer.objects.get', return_value=self.printer):
            await handle_text_input_printer_events(update, context)

        expected_text = (
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.'
        )
        update.message.reply_text.assert_awaited_once_with(expected_text)

    async def test_handle_text_input_printer_events_valid(self):
        update = AsyncMock()
        context = MagicMock()
        update.message.text = str(self.printer.id)

        with patch('monitoring.models.Printer.objects.get', return_value=self.printer):
            await handle_text_input_printer_events(update, context)

        str_text = str(update.message.reply_text.call_args[1])
        pattern = r"‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —Å –Ω–æ–º–µ—Ä–æ–º - (\d+)</b>"
        match = re.search(pattern, str_text)
        expected_printer_id = int(match.group(1))
        self.assertEqual(self.printer.id, expected_printer_id)
        self.assertIn(self.printer_error.description, str_text)
        self.assertIn(str(self.printer), str_text)

        expected_datetime = self.printer_error.event_date + timedelta(hours=7)
        expected_date = expected_datetime.strftime("%Y/%m/%d")
        expected_time = expected_datetime.strftime("%H:%M")
        self.assertIn(expected_date, str_text)
        self.assertIn(expected_time, str_text)


class TelegramBotStartCommandTests(StartTelegramBotAuthenticatedUser):
    def setUp(self):
        super().setUp()
        (self.PRINTERS, self.EVENTS, self.EVENTS_SUPPLIES, self.SUPPLIES, self.SINGLE_OBJECT,
         self.ALL_OBJECTS, self.HELP, self.EXIT, self.GO_BACK_START) = range(9)

    async def test_start_command(self):
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=987654321)

        self.assertEqual(self.update.effective_chat.id, user_db.chat_id)

        await start(self.update, self.context)
        expected_text = "üëã –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n"\
                        "–ú–µ–Ω—è –∑–æ–≤—É—Ç üñ®Ô∏èüßë‚Äçüîß *–ü—Ä–∏–Ω—Ç–µ—Ä –ú–∞—Å—Ç–µ—Ä: –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ü—Ä–∏–Ω—Ç–µ—Ä–æ–≤*. –Ø –ø–æ–º–æ–≥—É –í–∞–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é "\
                        "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. \n\n"\
                        "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å‚ùì"

        actual_text = str(self.update.message.reply_text.call_args[0][0])

        self.assertEqual(actual_text, expected_text)

        inline_keyboard_markup = self.update.message.reply_text.call_args[1]['reply_markup'].inline_keyboard

        self.assertEqual(inline_keyboard_markup[0][0].text, 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã')
        self.assertEqual(inline_keyboard_markup[1][0].text, 'üìÖ –°–æ–±—ã—Ç–∏—è')
        self.assertEqual(inline_keyboard_markup[2][0].text, 'Ô∏èüì¶ –†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
        self.assertEqual(inline_keyboard_markup[3][0].text, 'üÜò –ü–æ–º–æ—â—å')
        self.assertEqual(inline_keyboard_markup[3][1].text, 'üîö –í—ã—Ö–æ–¥')

        self.assertEqual(inline_keyboard_markup[0][0].callback_data, str(self.PRINTERS))
        self.assertEqual(inline_keyboard_markup[1][0].callback_data, str(self.EVENTS))
        self.assertEqual(inline_keyboard_markup[2][0].callback_data, str(self.SUPPLIES))
        self.assertEqual(inline_keyboard_markup[3][0].callback_data, str(self.HELP))
        self.assertEqual(inline_keyboard_markup[3][1].callback_data, str(self.EXIT))

    async def test_route_printers(self):
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=987654321)

        self.assertEqual(self.update.effective_chat.id, user_db.chat_id)

        await start(self.update, self.context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        query.data = str(self.PRINTERS)
        await printers(self.update, self.context)

        query.edit_message_text.assert_called_once_with(
            text="üñ®Ô∏è *–ü–†–ò–ù–¢–ï–†–´*\n\n"
                 "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø—Ü–∏—é.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üñ®Ô∏èüñ®Ô∏èüñ®Ô∏è –í—Å–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã", callback_data=str(self.ALL_OBJECTS))],
                [InlineKeyboardButton("üñ®Ô∏è –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä", callback_data=str(self.SINGLE_OBJECT))],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(self.GO_BACK_START)),
                 InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(self.EXIT))]
            ])
        )

        query_back = AsyncMock()
        query_back.answer = AsyncMock()
        self.update.callback_query = query_back
        query_back.data = str(self.GO_BACK_START)
        await start_over(self.update, self.context)

        query_back.edit_message_text.assert_called_once_with(
            text="üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –Ω–∞—á–∞–ª—É!\n"
                 "–ú–µ–Ω—è –≤—Å—ë –µ—â–µ –∑–æ–≤—É—Ç üñ®Ô∏èüßë‚Äçüîß *–ü—Ä–∏–Ω—Ç–µ—Ä –ú–∞—Å—Ç–µ—Ä: –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ü—Ä–∏–Ω—Ç–µ—Ä–æ–≤*. –Ø –ø–æ–º–æ–≥—É –í–∞–º –ø–æ–ª—É—á–∏—Ç—å "
                 "–Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
                 "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å‚ùì",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã", callback_data=str(self.PRINTERS))],
                [InlineKeyboardButton("üìÖ –°–æ–±—ã—Ç–∏—è", callback_data=str(self.EVENTS))],
                [InlineKeyboardButton("üì¶ –†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=str(self.SUPPLIES))],
                [
                    InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data=str(self.HELP)),
                    InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(self.EXIT)),
                ],
            ])
        )

    async def test_route_events(self):
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=987654321)

        self.assertEqual(self.update.effective_chat.id, user_db.chat_id)

        await start(self.update, self.context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        query.data = str(self.EVENTS)
        await events(self.update, self.context)

        query.edit_message_text.assert_called_once_with(
            text="üìÖ *–°–û–ë–´–¢–ò–Ø*\n\n"
                 "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø—Ü–∏—é.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìÖüìÖüìÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data=str(self.ALL_OBJECTS)), ],
                [InlineKeyboardButton("üìÖüñ®Ô∏è –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞", callback_data=str(self.SINGLE_OBJECT)), ],
                [InlineKeyboardButton("üì¶üîÑ –ó–∞–º–µ–Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data=str(self.EVENTS_SUPPLIES)), ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(self.GO_BACK_START)),
                    InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(self.EXIT)),
                ],
            ])
        )

    async def test_route_supplies(self):
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=987654321)

        self.assertEqual(self.update.effective_chat.id, user_db.chat_id)

        await start(self.update, self.context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        query.data = str(self.SUPPLIES)
        await supplies(self.update, self.context)

        query.edit_message_text.assert_called_once_with(
            text="üì¶ *–†–ê–°–•–û–î–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´*\n\n"
                 "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø—Ü–∏—é.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¶üì¶üì¶ –í—Å–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=str(self.ALL_OBJECTS)), ],
                [InlineKeyboardButton("üì¶ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=str(self.SINGLE_OBJECT)), ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(self.GO_BACK_START)),
                    InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(self.EXIT)),
                ],
            ])
        )

    async def test_route_help(self):
        user_db = await sync_to_async(TelegramUser.objects.get)(chat_id=987654321)

        self.assertEqual(self.update.effective_chat.id, user_db.chat_id)

        await start(self.update, self.context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        query.data = str(self.HELP)
        await help_command(self.update, self.context)

        query.edit_message_text.assert_called_once_with(
            text="üìú <b>–°–ü–†–ê–í–ö–ê</b>\n\n"
                 "1Ô∏è‚É£ –†–∞–∑–¥–µ–ª <i>–ü—Ä–∏–Ω—Ç–µ—Ä—ã</i> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ "
                 "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä–µ.\n\n"
                 "2Ô∏è‚É£ –†–∞–∑–¥–µ–ª <i>–°–æ–±—ã—Ç–∏—è</i> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏ (–æ—à–∏–±–∫–∏ –ø–µ—á–∞—Ç–∏, –∑–∞–º–µ–Ω–∞ "
                 "—Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞).\n"
                 "‚û§ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ <u>–í—Å–µ —Å–æ–±—ã—Ç–∏—è</u> –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 35 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–∏–∑–æ—à–µ–¥—â–∏—Ö —Å–æ–±—ã—Ç–∏–π;\n"
                 "‚û§ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ <u>–°–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞</u> –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–∏–∑–æ—à–µ–¥—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ "
                 "–ø—Ä–∏–Ω—Ç–µ—Ä–∞;\n"
                 "‚û§ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–±—ã—Ç–∏–π <u>–ó–∞–º–µ–Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</u> –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–º–µ–Ω —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö "
                 "–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ \n\n"
                 "3Ô∏è‚É£ –†–∞–∑–¥–µ–ª <i>–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</i> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¥–ª—è –≤—Å–µ—Ö"
                 " –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤.\n\n"
                 "4Ô∏è‚É£ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ–∫–Ω—É –Ω–∞–∂–º–∏—Ç–µ <i>–ù–∞–∑–∞–¥</i>\n\n"
                 "5Ô∏è‚É£ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –æ–∫–Ω—É –Ω–∞–∂–º–∏—Ç–µ <i>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É</i>\n\n"
                 "6Ô∏è‚É£ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ <i>–í—ã—Ö–æ–¥</i>\n\n"
                 "‚ÑπÔ∏è –í —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ "
                 "‚ò∞ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.\n\n"
                 "üî¢ –¢–∞–∫ –∫–∞–∫ Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ "
                 "–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º —Ç–∞–±–ª–∏—Ü–∞–º (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ = 20).\n"
                 "‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è\n\n"
                 "‚ö†Ô∏è –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
                 "üòä –•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã‚ùó",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=str(self.GO_BACK_START)),
                    InlineKeyboardButton("üîö –í—ã—Ö–æ–¥", callback_data=str(self.EXIT)),
                ]
            ])
        )

    async def test_route_end(self):
        await callback_update_user(self.mock_context)
        await start(self.update, self.context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        query.data = str(self.EXIT)
        await end(self.update, self.context)

        query.edit_message_text.assert_called_once_with(
            text="üëã –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!",
        )


class TelegramBotPagesTests(StartTelegramBotAuthenticatedUser):
    def setUp(self):
        super().setUp()
        (self.PRINTERS, self.EVENTS, self.EVENTS_SUPPLIES, self.SUPPLIES, self.SINGLE_OBJECT,
         self.ALL_OBJECTS, self.HELP, self.EXIT, self.GO_BACK_START) = range(9)

    async def test_all_printers_page(self):
        await callback_update_user(self.mock_context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        await all_printers(self.update, self.context)

        str_text = query.edit_message_text.call_args[1]['text']
        self.assertIn('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã', str_text)

    async def test_single_printer_page(self):
        await callback_update_user(self.mock_context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        await single_printer(self.update, self.context)

        str_text = query.edit_message_text.call_args[1]['text']
        self.assertIn('–ü–†–ò–ù–¢–ï–†', str_text)
        self.assertIn('–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞', str_text)

    async def test_all_events_page(self):
        await callback_update_user(self.mock_context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        await all_events(self.update, self.context)

        str_text = query.edit_message_text.call_args[1]['text']
        self.assertIn('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è', str_text)
        self.assertIn('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.', str_text)

    async def test_single_printer_events_page(self):
        await callback_update_user(self.mock_context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        await single_printer_events(self.update, self.context)

        str_text = query.edit_message_text.call_args[1]['text']
        self.assertIn('–°–û–ë–´–¢–ò–Ø –ü–†–ò–ù–¢–ï–†–ê', str_text)
        self.assertIn('–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–∏–Ω—Ç–µ—Ä–∞, —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–∏—Å–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.', str_text)

    async def test_events_supplies_page(self):
        await callback_update_user(self.mock_context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        await events_supplies(self.update, self.context)

        str_text = query.edit_message_text.call_args[1]['text']
        self.assertIn('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–º–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', str_text)
        self.assertIn('–ü—Ä–∏–Ω—Ç–µ—Ä', str_text)
        self.assertIn('–†–ú', str_text)
        self.assertIn('–í—Ä–µ–º—è –∑–∞–º–µ–Ω—ã', str_text)

    async def test_all_supplies_page(self):
        await callback_update_user(self.mock_context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        await all_supplies(self.update, self.context)

        str_text = query.edit_message_text.call_args[1]['text']
        self.assertIn('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', str_text)
        self.assertIn('–ù–∞–∑–≤–∞–Ω–∏–µ', str_text)
        self.assertIn('–ö–æ–ª-–≤–æ', str_text)
        self.assertIn('–ü—Ä–∏–Ω—Ç–µ—Ä', str_text)
        self.assertIn('–î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', str_text)

    async def test_single_supplies_page(self):
        await callback_update_user(self.mock_context)

        query = AsyncMock()
        query.answer = AsyncMock()
        self.update.callback_query = query

        await single_supplies(self.update, self.context)

        str_text = query.edit_message_text.call_args[1]['text']
        self.assertIn('–†–ê–°–•–û–î–ù–´–ô –ú–ê–¢–ï–†–ò–ê–õ', str_text)
        self.assertIn('–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /exit, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.', str_text)
        self.assertIn('–î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', str_text)


class InitFirstUsersNotCalled(StartTelegramAppUnauthenticatedUser):
    def setUp(self):
        super().setUp()
        mock_job_queue = Mock()
        mock_job = Mock()
        mock_job_queue.jobs.return_value = [mock_job]

        self.mock_context = Mock()
        self.mock_context.job_queue = mock_job_queue
        self.mock_context.bot.send_message = AsyncMock()

    async def test_not_allowed_users(self):
        await init_first_users(self.mock_context)
        self.mock_context.bot.send_message.assert_not_called()